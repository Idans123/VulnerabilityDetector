using Microsoft.AspNetCore.Mvc;
using System;
using System.Threading.Tasks;
using VulnerabilityDetector.Interfaces;
using VulnerabilityDetector.Models;

namespace VulnerabilityDetector.Controllers
{
    [ApiController]
    [Route("api/v1/")]
    public class VulnerabilityDetectorController : ControllerBase
    {
        private const string GeneralErrorMessage = "Failed during the scanning for Vulnerability.";
        
        private readonly IVulnerabilityDetectorService _vulnerabilityDetectorService;

        public VulnerabilityDetectorController(IVulnerabilityDetectorService vulnerabilityDetectorService)
        {
            _vulnerabilityDetectorService = vulnerabilityDetectorService;
        }

        [HttpPost(nameof(Scan))]
        public async Task<IActionResult> Scan([FromBody] ScanRequestParams scanRequestParams)
        {
            if (ParamsAreNullOrEmpty(scanRequestParams))
            {
                return BadRequest($"{nameof(scanRequestParams)} cannot be null or empty.");
            }

            try
            {
                VulnerablePackagesResponse result = await _vulnerabilityDetectorService.ScanAsync(scanRequestParams.EcoSystem, scanRequestParams.FileContent);
                return Ok(result);
            }
            catch (OperationCanceledException oce)
            {
                return StatusCode(204, $"Operation was canceled. {oce.Message}");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"{GeneralErrorMessage} message: {ex.Message}. source: {ex.Source}");
            }
        }

        private bool ParamsAreNullOrEmpty(ScanRequestParams scanRequestParams)
        {
            return string.IsNullOrEmpty(scanRequestParams.EcoSystem) || string.IsNullOrEmpty(scanRequestParams.FileContent);
        }
    }
}
